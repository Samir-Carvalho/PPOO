Solução do Exercício da Atividade 1
public class Principal {
    public static void main(String[] args) {
        NotaFiscal nf = new NotaFiscal(18,1,2021);
       
        CompraNormal cn = new CompraNormal("Geladeira",2,1500,10);
        CompraComCupom ccc1 = new CompraComCupom("Ar Condicionado",1,800,200);
        CompraComCupom ccc2 = new CompraComCupom("Liquidificador",2,90,250);
       
        nf.comprar(cn);
        nf.comprar(ccc1);
        nf.comprar(ccc2);
               
        nf.imprimirNotaFiscal();
    }   
}
==========================================================================================================import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class NotaFiscal {
    private int dia;
    private int mes;
    private int ano;
    private List<Compra> compras;

    public NotaFiscal(int dia, int mes, int ano) {
        this.dia = dia;
        this.mes = mes;
        this.ano = ano;
        compras = new ArrayList<>();
    }

    public void comprar(Compra c) {
        compras.add(c);
    }

    public void imprimirNotaFiscal() {
        double soma = 0;
        Collections.sort(compras);
        System.out.printf("Data: %d/%d/%d%n",dia,mes,ano);
        System.out.printf("%-15s\t%s\t%-8s\t%s%n%n","Produto","Qtd","Preço","Valor Pago");
        for (Compra compra : compras) {
            System.out.println(compra);
            soma += compra.calcularPrecoFinal();
        }
        System.out.printf("%nTotal R$ %.2f%n", soma);
    }
}
=========================================================================================================

public abstract class Compra implements Comparable<Compra>{
    private String nome;
    private int qtd;
    private double preco;

    public Compra(String nome, int qtd, double preco) {
        this.nome = nome;
        this.qtd = qtd;
        this.preco = preco;
    }

    public String getNome() {
        return nome;
    }

    public int getQtd() {
        return qtd;
    }

    public double getPreco() {
        return preco;
    }
   
    public abstract double calcularPrecoFinal();

    @Override
    public int compareTo(Compra c) {
        if(c.getPreco() < getPreco()){
            return 1;
        }else if(c.getPreco() > getPreco()){
            return -1;
        }
        return 0;
    }

    @Override
    public String toString() {
        return getNome() + "\t" + getQtd() + "\t" + String.format("%-8.2f",getPreco()) + "\t" + String.format("%.2f",calcularPrecoFinal());
    }
}
===========================================================================================================

public class CompraNormal extends Compra{
    private int desconto;

    public CompraNormal(String nome, int qtd, double preco, int desconto) {
        super(nome, qtd, preco);
        this.desconto = desconto;
    }

    @Override
    public double calcularPrecoFinal() {
        return getQtd() * getPreco() * (1 - desconto/100.0);
    }
}

===========================================================================================================

public class CompraComCupom extends Compra{
    private double valorCupom;

    public CompraComCupom(String nome, int qtd, double preco, double valorCupom) {
        super(nome, qtd, preco);
        this.valorCupom = valorCupom;
    }

    public double getValorCupom() {
        return valorCupom;
    }
   
    @Override
    public double calcularPrecoFinal() {
        double valorCompra = getQtd() * getPreco();
        if(valorCompra > getValorCupom()){
            return valorCompra - getValorCupom();
        }
        return 0; 
    }   
}

